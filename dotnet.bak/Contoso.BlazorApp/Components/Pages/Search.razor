@page "/search"
@using Contoso.BlazorApp.Models
@using Contoso.BlazorApp.Services
@inject AuthService AuthService
@inject ApiService ApiService

<PageTitle>Search - Contoso Outdoor Social</PageTitle>

<div class="w-full max-w-2xl mx-auto">
    <h1 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">Search</h1>
    
    <form @onsubmit="HandleSearch" @onsubmit:preventDefault="true" class="mb-6">
        <div class="relative">
            <input type="text" @bind="searchTerm" @oninput="HandleSearchChange"
                   placeholder="Search by username..."
                   class="w-full bg-gray-100 dark:bg-gray-800 rounded-md p-4 pl-12 text-base text-gray-900 dark:text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500" />
            <div class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                <SearchIcon />
            </div>
        </div>
    </form>
    
    @if (isLoading)
    {
        <div class="text-center py-10 text-gray-500">Searching...</div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="text-center py-10 text-red-500">@error</div>
    }
    else if (!string.IsNullOrEmpty(searchTerm) && searchResults.Count == 0)
    {
        <div class="text-center py-10 text-gray-400">No results found.</div>
    }
    else if (searchResults.Count > 0)
    {
        <div class="flex flex-col gap-4">
            @foreach (var post in searchResults)
            {
                <PostCard Post="post" OnPostUpdated="HandlePostUpdated" />
            }
        </div>
    }
    else if (string.IsNullOrEmpty(searchTerm))
    {
        <div class="text-center py-10 text-gray-400">Enter a username to search for posts.</div>
    }
    
    <FloatingActionButton OnClick="HandleOpenPostModal" />
    <PostingModal IsOpen="isPostModalOpen" OnClose="HandleClosePostModal" OnPostCreated="HandlePostCreated" />
</div>

@code {
    private string searchTerm = string.Empty;
    private List<Post> searchResults = new();
    private bool isLoading = false;
    private string error = string.Empty;
    private bool isPostModalOpen = false;

    private void HandleSearchChange(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return;

        try
        {
            isLoading = true;
            error = string.Empty;
            
            // Get all posts and filter by username on the frontend
            var response = await ApiService.GetPostsAsync();
            var filtered = response.Data.Where(post => 
                !string.IsNullOrEmpty(post.Username) && 
                post.Username.Contains(searchTerm.Trim(), StringComparison.OrdinalIgnoreCase)
            ).ToList();
            
            searchResults = filtered;
        }
        catch (Exception)
        {
            error = "An error occurred during search.";
            searchResults.Clear();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleOpenPostModal() => isPostModalOpen = true;
    private void HandleClosePostModal() => isPostModalOpen = false;

    private async Task HandlePostCreated()
    {
        // Refresh search results if there's an active search
        if (!string.IsNullOrEmpty(searchTerm))
        {
            await HandleSearch();
        }
        isPostModalOpen = false;
    }

    private async Task HandlePostUpdated()
    {
        // Refresh search results if there's an active search
        if (!string.IsNullOrEmpty(searchTerm))
        {
            await HandleSearch();
        }
    }
}
