@using Contoso.BlazorApp.Services
@inject AuthService AuthService
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<Modal IsOpen="IsOpen" OnClose="HandleCancel">
    <div class="w-full mb-4">
        <textarea @bind="content" @oninput="HandleContentChange"
                  placeholder="Enter your content."
                  disabled="isLoading"
                  class="w-full min-h-[150px] bg-gray-100 dark:bg-gray-800 rounded-md p-4 text-base text-gray-900 dark:text-white placeholder-gray-400 resize-vertical focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-70">
        </textarea>
    </div>
    
    @if (!string.IsNullOrEmpty(error))
    {
        <p class="text-red-500 text-sm mb-4 text-center">@error</p>
    }
    
    <div class="flex justify-center gap-4">
        <button @onclick="HandleSubmit"
                disabled="@(isLoading || string.IsNullOrWhiteSpace(content))"
                class="bg-blue-600 text-white rounded-md px-8 py-3 text-sm transition-opacity disabled:opacity-70 disabled:cursor-not-allowed">
            @(isLoading ? "Processing..." : "Submit")
        </button>
        <button @onclick="HandleCancel"
                disabled="isLoading"
                class="bg-gray-200 text-gray-800 rounded-md px-8 py-3 text-sm transition-opacity disabled:opacity-70 disabled:cursor-not-allowed">
            Cancel
        </button>
    </div>
</Modal>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnPostCreated { get; set; }

    private string content = string.Empty;
    private bool isLoading = false;
    private string error = string.Empty;

    private void HandleContentChange(ChangeEventArgs e)
    {
        content = e.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrEmpty(error))
        {
            error = string.Empty;
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(content))
        {
            error = "Please enter content.";
            return;
        }

        isLoading = true;
        error = string.Empty;

        try
        {
            if (AuthService.User != null)
            {
                var response = await ApiService.CreatePostAsync(content, AuthService.User.Username);
                content = string.Empty;
                await OnClose.InvokeAsync();
                await OnPostCreated.InvokeAsync();
            }
        }
        catch (Exception)
        {
            error = "An error occurred while creating the post. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleCancel()
    {
        if (!string.IsNullOrWhiteSpace(content))
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "You have unsaved content. Are you sure you want to cancel?");
            if (!confirmed)
            {
                return;
            }
        }

        content = string.Empty;
        error = string.Empty;
        await OnClose.InvokeAsync();
    }
}
