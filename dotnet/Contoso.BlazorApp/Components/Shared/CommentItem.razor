@using Contoso.BlazorApp.Models
@using Contoso.BlazorApp.Services
@inject AuthService AuthService
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="flex flex-col w-full py-3 border-b border-gray-300">
    <div class="flex items-center mb-2">
        <div class="w-9 h-9 rounded-full bg-gray-200 dark:bg-gray-700 mr-2"></div>
        <div class="text-sm font-bold text-gray-900 dark:text-white">
            @Comment.Username
        </div>
    </div>
    
    <div class="ml-11">
        @if (isEditing)
        {
            <div class="mb-2">
                <textarea @bind="editContent"
                          class="w-full bg-gray-100 dark:bg-gray-800 rounded-md p-3 text-sm text-gray-900 dark:text-white resize-vertical focus:outline-none focus:ring-2 focus:ring-blue-500">
                </textarea>
            </div>
            <div class="flex gap-2">
                <button @onclick="HandleSaveEdit"
                        class="bg-blue-600 text-white rounded-md px-3 py-1 text-sm hover:bg-blue-700 transition-colors">
                    Save
                </button>
                <button @onclick="HandleCancelEdit"
                        class="bg-gray-200 text-gray-800 rounded-md px-3 py-1 text-sm hover:bg-gray-300 transition-colors">
                    Cancel
                </button>
            </div>
        }
        else
        {
            <p class="text-sm text-gray-900 dark:text-white leading-relaxed break-words mb-2">
                @Comment.Content
            </p>
            
            @if (isAuthor)
            {
                <div class="flex gap-2">
                    <button @onclick="HandleEditClick"
                            class="text-xs text-gray-500 hover:text-blue-600 transition-colors">
                        Edit
                    </button>
                    <button @onclick="HandleDeleteClick"
                            class="text-xs text-gray-500 hover:text-red-600 transition-colors">
                        Delete
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public Comment Comment { get; set; } = new();
    [Parameter] public EventCallback OnCommentUpdated { get; set; }

    private bool isEditing = false;
    private string editContent = string.Empty;
    private bool isAuthor = false;

    protected override void OnInitialized()
    {
        editContent = Comment.Content;
        isAuthor = AuthService.User != null && AuthService.User.Username == Comment.Username;
    }

    private void HandleEditClick()
    {
        isEditing = true;
        editContent = Comment.Content;
    }

    private void HandleCancelEdit()
    {
        isEditing = false;
        editContent = Comment.Content;
    }

    private async Task HandleSaveEdit()
    {
        if (string.IsNullOrWhiteSpace(editContent) || AuthService.User == null) return;

        try
        {
            await ApiService.UpdateCommentAsync(Comment.PostId, Comment.Id, editContent, AuthService.User.Username);
            Comment.Content = editContent;
            isEditing = false;
            await OnCommentUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred while editing comment: {ex.Message}");
        }
    }

    private async Task HandleDeleteClick()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (!confirmed) return;

        try
        {
            await ApiService.DeleteCommentAsync(Comment.PostId, Comment.Id);
            await OnCommentUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred while deleting comment: {ex.Message}");
        }
    }
}
