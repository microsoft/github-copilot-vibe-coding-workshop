@using Contoso.BlazorApp.Models
@using Contoso.BlazorApp.Services
@inject AuthService AuthService
@inject ApiService ApiService
@inject NavigationManager Navigation

<div class="flex flex-col w-full max-w-2xl bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 p-4 cursor-pointer"
     @onclick="HandlePostClick">
    <div class="flex items-center mb-2">
        <div class="w-10 h-10 rounded-full bg-gray-200 dark:bg-gray-700 mr-2"></div>
        <div class="text-base font-bold text-gray-900 dark:text-white">
            @Post.Username
        </div>
    </div>
    <div class="mb-2">
        <p class="text-base text-gray-900 dark:text-white leading-relaxed break-words">
            @Post.Content
        </p>
    </div>
    <div class="flex gap-6 mt-2">
        <button @onclick="HandleLikeToggle" @onclick:stopPropagation="true"
                class="flex items-center gap-1 @(isLiked ? "text-red-500" : "text-gray-500 hover:text-red-500")"
                aria-label="Like">
            <HeartIcon Filled="isLiked" />
            @if (likesCount > 0)
            {
                <span class="text-xs">@likesCount</span>
            }
        </button>
        <button @onclick="HandleCommentClick" @onclick:stopPropagation="true"
                class="flex items-center gap-1 text-gray-500 hover:text-blue-500"
                aria-label="Comment">
            <CommentIcon />
            @if (Post.CommentsCount > 0)
            {
                <span class="text-xs">@Post.CommentsCount</span>
            }
        </button>
    </div>
</div>

@code {
    [Parameter] public Post Post { get; set; } = new();
    [Parameter] public EventCallback OnPostUpdated { get; set; }

    private bool isLiked;
    private int likesCount;

    protected override void OnInitialized()
    {
        isLiked = Post.IsLiked;
        likesCount = Post.LikesCount;
    }

    private void HandlePostClick()
    {
        Navigation.NavigateTo($"/post/{Post.Id}");
    }

    private async Task HandleLikeToggle()
    {
        try
        {
            if (AuthService.User == null) return;

            if (isLiked)
            {
                var response = await ApiService.UnlikePostAsync(Post.Id, AuthService.User.Username);
                if (response.Success)
                {
                    likesCount = Math.Max(0, likesCount - 1);
                    isLiked = false;
                }
            }
            else
            {
                var response = await ApiService.LikePostAsync(Post.Id, AuthService.User.Username);
                if (response.Success)
                {
                    likesCount++;
                    isLiked = true;
                }
            }

            await OnPostUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred while processing like: {ex.Message}");
        }
    }

    private void HandleCommentClick()
    {
        Navigation.NavigateTo($"/post/{Post.Id}");
    }
}
